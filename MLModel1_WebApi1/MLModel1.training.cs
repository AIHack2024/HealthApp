﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace MLModel1_WebApi1
{
    public partial class MLModel1
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"gender", @"gender"),new InputOutputColumnPair(@"systemicManifestations", @"systemicManifestations"),new InputOutputColumnPair(@"ANA", @"ANA"),new InputOutputColumnPair(@"Anti-dsDNA", @"Anti-dsDNA"),new InputOutputColumnPair(@"RF", @"RF"),new InputOutputColumnPair(@"CRP", @"CRP"),new InputOutputColumnPair(@"WBC", @"WBC"),new InputOutputColumnPair(@"RBC", @"RBC"),new InputOutputColumnPair(@"Hemoglobin", @"Hemoglobin"),new InputOutputColumnPair(@"Platelets", @"Platelets"),new InputOutputColumnPair(@"ESR", @"ESR"),new InputOutputColumnPair(@"FVC", @"FVC"),new InputOutputColumnPair(@"FEV1", @"FEV1"),new InputOutputColumnPair(@"FEV1/FVC Ratio", @"FEV1/FVC Ratio"),new InputOutputColumnPair(@"Creatinine", @"Creatinine"),new InputOutputColumnPair(@"GFR", @"GFR"),new InputOutputColumnPair(@"C-Peptide", @"C-Peptide"),new InputOutputColumnPair(@"Autoantibodies", @"Autoantibodies"),new InputOutputColumnPair(@"Fasting Glucose", @"Fasting Glucose"),new InputOutputColumnPair(@"HbA1c", @"HbA1c"),new InputOutputColumnPair(@"Anti-CCP", @"Anti-CCP"),new InputOutputColumnPair(@"Current Medications", @"Current Medications")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"age", @"age"),new InputOutputColumnPair(@"Heart Rate", @"Heart Rate"),new InputOutputColumnPair(@"Respiratory Rate", @"Respiratory Rate"),new InputOutputColumnPair(@"Body Temperature", @"Body Temperature"),new InputOutputColumnPair(@"Cholesterol", @"Cholesterol"),new InputOutputColumnPair(@"ALT", @"ALT"),new InputOutputColumnPair(@"AST", @"AST")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"symptoms",outputColumnName:@"symptoms"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Blood Type",outputColumnName:@"Blood Type"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Blood Pressure",outputColumnName:@"Blood Pressure"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Oxygen Saturation",outputColumnName:@"Oxygen Saturation"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"X-ray Findings",outputColumnName:@"X-ray Findings"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"MRI Findings",outputColumnName:@"MRI Findings"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Echocardiogram Results",outputColumnName:@"Echocardiogram Results"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"gender",@"systemicManifestations",@"ANA",@"Anti-dsDNA",@"RF",@"CRP",@"WBC",@"RBC",@"Hemoglobin",@"Platelets",@"ESR",@"FVC",@"FEV1",@"FEV1/FVC Ratio",@"Creatinine",@"GFR",@"C-Peptide",@"Autoantibodies",@"Fasting Glucose",@"HbA1c",@"Anti-CCP",@"Current Medications",@"age",@"Heart Rate",@"Respiratory Rate",@"Body Temperature",@"Cholesterol",@"ALT",@"AST",@"symptoms",@"Blood Type",@"Blood Pressure",@"Oxygen Saturation",@"X-ray Findings",@"MRI Findings",@"Echocardiogram Results"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"finalDiagnosis",inputColumnName:@"finalDiagnosis"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(new SdcaMaximumEntropyMulticlassTrainer.Options(){L1Regularization=1F,L2Regularization=0.1F,LabelColumnName=@"finalDiagnosis",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
